def random_forest(x_train,y_train,x_test):
    random_forest=RandomForestClassifier(n_estimators=100)
    random_forest.fit(x_train, y_train)
    y_pred=random_forest.predict(x_test)
    acc=random_forest.score(x_train, y_train)
    print(acc)
    return y_pred


def decision_tree(x_train,y_train,x_test):
    decision_tree=DecisionTreeClassifier()
    decision_tree.fit(x_train, y_train)
    y_pred=decision_tree.predict(x_test)
    acc=decision_tree.score(x_train, y_train)
    print(acc)
    return y_pred


def sgd(x_train,y_train,x_test):
    sgd=SGDClassifier()
    sgd.fit(x_train,y_train)
    y_pred=sgd.predict(x_test)
    print(sgd.score(x_train, y_train))
    return y_pred


def svc(x_train,y_train,x_test):
    svc=SVC()
    svc.fit(x_train, y_train)
    y_pred=svc.predict(x_test)
    acc=svc.score(x_train, y_train)
    print(acc)
    return y_pred


def knn(x_train,y_train,x_test):
    knn=KNeighborsClassifier(n_neighbors=3)
    knn.fit(x_train, y_train)
    yk_pred=knn.predict(x_test)
    acc=knn.score(x_train,y_train)
    print(acc)
    return yk_pred

def save(predict,file_name):
    output=pd.DataFrame({'PassengerId':test['PassengerId'],'Survived':predict})
    output.to_csv(file_name+".csv",index=False)

#data analysis and wrangling
import pandas as pd
import numpy as np
import random as rnd

#visualization
import seaborn as sns
import matplotlib.pyplot as plt


#machinelearning
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC,LinearSVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.linear_model import Perceptron
from sklearn.linear_model import SGDClassifier
from sklearn.tree import DecisionTreeClassifier


train=pd.read_csv("train.csv")
test=pd.read_csv("test.csv")
combine=[train,test]
#print(train[['Sex','Survived']].groupby(['Sex'],as_index=False).mean().sort_values(by=['Survived'],ascending=False))
#fornumerial
#g=sns.FacetGrid(train,col='Survived',row='Pclass',size=2.2,aspect=1.6)
#g.map(plt.hist,'Age',alpha=.5,bins=20)
#g.add_legend()

#forcategorical
#grid=sns.FacetGrid(train,row='Embarked',size=2.2,aspect=1.6)
#grid.map(sns.pointplot,'Pclass','Survived','Sex',palette='deep')
#grid.add_legend()

#grid=sns.FacetGrid(train,row='Embarked',col='Survived',size=2.2,aspect=1.6)
#grid.map(sns.barplot,'Sex','Fare',alpha=.5,ci=None)
#grid.add_legend()
#plt.show()

#print("before",train.shape,test.shape,combine[0].shape,combine[1].shape)
train=train.drop(["Ticket","Cabin"],axis=1)
test=test.drop(["Ticket","Cabin"],axis=1)
combine=[train,test]

for dataset in combine:
    dataset['Title']=dataset.Name.str.extract('([A-Za-z]+)\.',expand=False)

#print(pd.crosstab(train['Title'],train['Sex']))

for dataset in combine:
    dataset['Title']=dataset['Title'].replace(['Lady','Countess','Capt','Col',\
                                               'Don','Dr','Major','Rev','Sir','Jonkheer','Dona'],'Rare')

    dataset['Title']=dataset['Title'].replace('Mlle','Miss')
    dataset['Title']=dataset['Title'].replace('Ms','Miss')
    dataset['Title']=dataset['Title'].replace('Mme','Mrs')

#print(train[['Title','Survived']].groupby(['Title'],as_index=False).mean())

title_mapping={"Mr":1,"Miss":2,"Mrs":3,"Master":4,"Rare":5}
for dataset in combine:
    dataset['Title']=dataset['Title'].map(title_mapping)
    dataset['Title']=dataset['Title'].fillna(0)

#print(train.head())

train=train.drop(['Name','PassengerId'],axis=1)
test=test.drop(['Name'],axis=1)
combine=[train,test]
#print(train.shape,test.shape)
for dataset in combine:
    dataset['Sex']=dataset['Sex'].map({'female':1,'male':0}).astype(int)

#print(train.head())

# grid=sns.FacetGrid(train,row='Pclass',col='Sex',size=2.2,aspect=1.6)
# grid.map(plt.hist,'Age',alpha=.5,bins=20)
# grid.add_legend()
#plt.show()

guess_ages=np.zeros((2,3))

for dataset in combine:
    for i in range(0,2):
        for j in range(0,3):
            guess_df=dataset[(dataset['Sex']==i)&(dataset['Pclass']==j+1)]['Age'].dropna()

            age_guess=guess_df.median()

            guess_ages[i,j]=int(age_guess)

    for i in range(0,2):
        for j in range(0,3):
          dataset.loc[(dataset.Age.isnull())&(dataset.Sex==i)&(dataset.Pclass==j+1),'Age']=guess_ages[i,j]

    dataset['Age']=dataset['Age'].astype(int)
#print(train.head)
# train['AgeBand']=pd.cut(train['Age'],5)
#print(train[['AgeBand','Survived']].groupby(['AgeBand'],as_index=False).mean().\
#sort_values(by='AgeBand',ascending=True))

# for dataset in combine:
#     dataset.loc[dataset['Age']<=16,'Age']=0
#     dataset.loc[(dataset['Age']>16)&(dataset['Age']<=32),'Age']=1
#     dataset.loc[(dataset['Age']>32)&(dataset['Age']<=48),'Age']=2
#     dataset.loc[(dataset['Age']>48)&(dataset['Age']<=64),'Age']=3
#     dataset.loc[dataset['Age']>64,'Age']=4
#print(train.head)
# train=train.drop(['AgeBand'],axis=1)
# combine=[train,test]

for dataset in combine:
    dataset['FamilySize']=dataset['SibSp']+dataset['Parch']+1
    dataset['FamilySize']=dataset['FamilySize'].astype(int)

# train[['FamilySize','Survived']].groupby(['FamilySize'],as_index=False).mean().sort_values(by='Survived',ascending=False)
#alone
# for dataset in combine:
#     dataset['IsAlone']=0
#     dataset.loc[dataset['FamilySize']==1,'IsAlone']=1

# train[['IsAlone','Survived']].groupby(['IsAlone'],as_index=False).mean()

train=train.drop(['Parch','SibSp'],axis=1)#,'FamilySize'
test=test.drop(['Parch','SibSp'],axis=1)#,'FamilySize'
combine=[train,test]



# for dataset in combine:
#     dataset['Age*Class']=dataset.Age*dataset.Pclass


for dataset in combine:
    freq_port=dataset['Embarked'].dropna().mode()[0]
    dataset['Embarked']=dataset['Embarked'].fillna(freq_port)



#print(train[['Embarked','Survived']].groupby(['Embarked'],as_index=False).mean().sort_values(by='Survived',ascending=False))

for dataset in combine:
    dataset['Embarked']=dataset['Embarked'].map({'S':0,'C':1,'Q':2}).astype(int)


for dataset in combine:
    for i in range(1,4):
        datafram=dataset[dataset['Pclass']==i]['Fare'].dropna()
        fill=datafram.median()
        dataset.loc[(dataset.Fare.isnull()) & (dataset.Pclass == i), 'Fare'] = fill

# train['FareBand']=pd.qcut(train['Fare'],4)
# for dataset in combine:
#     dataset.loc[dataset['Fare']<=7.91,'Fare']=0
#     dataset.loc[(dataset['Fare']>7.91)&(dataset['Fare']<=14.454),'Fare']=1
#     dataset.loc[(dataset['Fare']>14.454)&(dataset['Fare']<=31),'Fare']=2
#     dataset.loc[dataset['Fare']>31,'Fare']=3
#     dataset['Fare']=dataset['Fare'].astype(int)

# train=train.drop(['FareBand'],axis=1)
# combine=[train,test]

X_train=train.drop(["Survived"],axis=1) #,'Age*Class','Embarked','Title'
Y_train=train["Survived"]
X_test=test.drop(["PassengerId"],axis=1)
# print(X_train.shape,Y_train.shape,X_test.shape)
# print(X_test)
# print(X_test['Fare'].isnull().sum())

# yd_pred=decision_tree(X_train,Y_train,X_test)
# output=pd.DataFrame({'PassengerId':test['PassengerId'],'survived':yd_pred})
# output.to_csv("result dec.csv",index=False)

# yr_pred=random_forest(X_train,Y_train,X_test)
# output=pd.DataFrame({'PassengerId':test['PassengerId'],'survived':yr_pred})
# output.to_csv("result random.csv",index=False)

# ys_pred=sgd(X_train,Y_train,X_test)
# output=pd.DataFrame({'PassengerId':test['PassengerId'],'survived':ys_pred})
# output.to_csv("result sgd.csv",index=False)

# ysvc_pred=svc(X_train,Y_train,X_test)
# output=pd.DataFrame({'PassengerId':test['PassengerId'],'survived':ysvc_pred})
# output.to_csv("result svc.csv",index=False)

# yk_pred=knn(X_train,Y_train,X_test)
# output=pd.DataFrame({'PassengerId':test['PassengerId'],'survived':yk_pred})
# output.to_csv("result knn.csv",index=False)